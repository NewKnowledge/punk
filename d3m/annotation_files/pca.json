{
    "output_type": [
        "features"
    ],
    "id": "f7543334-97f7-3c43-978d-2d0b03829d4d",
    "team": "distil",
    "parameters": [],
    "version": "1.1.1",
    "library": "punk",
    "compute_resources": {
        "sample_unit": [
            "MB"
        ],
        "expected_running_time": [
            5.0
        ],
        "gpus_per_node": [
            0
        ],
        "num_nodes": [
            1
        ],
        "sample_size": [
            1000.0,
            10.0
        ],
        "disk_per_node": [
            1.0
        ],
        "mem_per_node": [
            1.0
        ],
        "mem_per_gpu": [
            0.0
        ],
        "cores_per_node": [
            1
        ]
    },
    "name": "punk.feature_selection.pca.PCAFeatures",
    "methods_available": [
        {
            "name": "produce",
            "returns": "typing.List[int]",
            "parameters": [
                {
                    "name": "inputs",
                    "optional": false,
                    "type": "numpy.ndarray",
                    "is_hyperparameter": false
                }
            ],
            "id": "d3m.primitives.distil.PCAFeatures.produce",
            "description": "Perform PCA and return a list of the indices of the most important\nfeatures, ordered by contribution to first PCA component\n                                                                        \nThe matrix M will correspond to the absolute value of the components of \nthe decomposiiton thus giving a matrix where each column corresponds to \na principal component and rows are the components that rescale each \nfeature.  \n                                                                        \nFor example, pca.components_.T could look like this:                        \n                                                                        \narray([[ 0.52237162,  0.37231836, -0.72101681, -0.26199559],                \n    [-0.26335492,  0.92555649,  0.24203288,  0.12413481],                 \n    [ 0.58125401,  0.02109478,  0.14089226,  0.80115427],                 \n    [ 0.56561105,  0.06541577,  0.6338014 , -0.52354627]])                \n                                                                        \nSo the most important feature with respect to the first principal \ncomponent would be the 3rd feature as this has an absolute value of \n0.58125401 which is greater than all the entries in that column.                             \n                                                                        \n                                                                        \n\"importance_on1stpc\" corresponds to the indices of most important       \nfeatures for the first principal. Component are in ascending order      \n(most important feature 0, least important feature n_features-1).       \n                                                                        \n\nParams \n------- \ndata : np.ndarray, [n_samples, n_features]\n    Training data."
        },
        {
            "name": "fit",
            "returns": "builtins.NoneType",
            "parameters": [],
            "id": "d3m.primitives.distil.PCAFeatures.fit",
            "description": ""
        },
        {
            "name": "get_call_metadata",
            "returns": "builtins.dict",
            "parameters": [],
            "id": "d3m.primitives.distil.PCAFeatures.get_call_metadata",
            "description": ""
        },
        {
            "name": "set_random_seed",
            "returns": "builtins.NoneType",
            "parameters": [
                {
                    "name": "seed",
                    "optional": false,
                    "type": "builtins.int",
                    "is_hyperparameter": false
                }
            ],
            "id": "d3m.primitives.distil.PCAFeatures.set_random_seed",
            "description": "Sets a random seed for all operations from now on inside the primitive.\n\nBy default it sets numpy's and Python's random seed.\n\nParameters\n----------\nseed : int\n    A random seed to use."
        },
        {
            "name": "get_params",
            "returns": "builtins.dict",
            "parameters": [],
            "id": "d3m.primitives.distil.PCAFeatures.get_params",
            "description": ""
        },
        {
            "name": "set_params",
            "returns": "builtins.NoneType",
            "parameters": [
                {
                    "name": "params",
                    "optional": false,
                    "type": "builtins.dict",
                    "is_hyperparameter": false
                }
            ],
            "id": "d3m.primitives.distil.PCAFeatures.set_params",
            "description": ""
        }
    ],
    "languages": [
        "python3.6"
    ],
    "common_name": "PCAFeatures",
    "task_type": [
        "feature extraction"
    ],
    "original_name": "punk.feature_selection.pca.PCAFeatures",
    "schema_version": 1.0,
    "interface_type": "data_cleaning",
    "is_class": true,
    "description": "Ranking of features using principal component analysis. Returns a ranking of the features based on the magnitude of their contributions to the first principal componenet and a ranking of the features based on the highest magnitude contribution to all the principal componenets.",
    "interfaces": [
        "base.PrimitiveBase"
    ],
    "interfaces_version": "0.1.0",
    "build": [
        {
            "package": "punk",
            "type": "pip"
        }
    ],
    "algorithm_type": [
        "dimensionality reduction"
    ],
    "source_code": "https://github.com/NewKnowledge/punk/blob/dev/punk/feature_selection/pca.py"
}
